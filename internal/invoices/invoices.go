package invoices

import (
	"database/sql"
	"encoding/json"
	"time"

	sq "github.com/Masterminds/squirrel"
	"github.com/cockroachdb/errors"
	"github.com/jmoiron/sqlx"
)

type Invoice struct {
	CreationDate      *time.Time `json:"creationDate" db:"creation_date"`
	SettleDate        *time.Time `json:"settleDate" db:"settle_date"`
	AddIndex          uint64     `json:"addIndex" db:"add_index"`
	SettleIndex       *uint64    `json:"settleIndex" db:"settle_index"`
	PaymentRequest    *string    `json:"paymentRequest" db:"payment_request"`
	DestinationPubKey *string    `json:"destinationPubKey" db:"destination_pub_key"`
	RHash             *string    `json:"rHash" db:"r_hash"`
	RPreimage         *string    `json:"rPreimage" db:"r_preimage"`
	Memo              *string    `json:"memo" db:"memo"`
	Value             *float64   `json:"value" db:"value"`
	AmountPaid        *float64   `json:"amtPaid" db:"amt_paid"`
	InvoiceState      *string    `json:"invoiceState" db:"invoice_state"`
	IsRebalance       *bool      `json:"isRebalance" db:"is_rebalance"`
	IsKeysend         *bool      `json:"isKeysend" db:"is_keysend"`
	IsAmp             *bool      `json:"isAmp" db:"is_amp"`
	PaymentAddr       *string    `json:"paymentAddr" db:"payment_addr"`
	FallbackAddr      *string    `json:"fallbackAddr" db:"fallback_addr"`
	UpdatedOn         *time.Time `json:"updatedOn" db:"updated_on"` // Generated by Torq if the status has changed
	Expiry            *uint32    `json:"expiry" db:"expiry"`
	CltvExpiry        *uint32    `json:"cltvExpiry" db:"cltv_expiry"`
	Private           *bool      `json:"private" db:"private"`
}

func getInvoices(db *sqlx.DB, nodeIds []int, filter sq.Sqlizer, order []string, limit uint64, offset uint64) (r []*Invoice,
	total uint64, err error) {

	qb := sq.Select("*").FromSelect(sq.Select(`
				distinct add_index,
				creation_date,
				settle_date,
				settle_index,
				invoice.payment_request,
				invoice.destination_pub_key,
				r_hash,
				r_preimage,
				memo,
				(invoice.value_msat/1000) as value,
				(invoice.amt_paid_msat/1000) as amt_paid,
				invoice_state,
    			coalesce(invoice.r_hash = p.payment_hash, false) as is_rebalance,
				is_keysend,
				is_amp,
				payment_addr,
				fallback_addr,
				invoice.updated_on,
				expiry,
				cltv_expiry,
				private
			`).From("invoice").
		Where(sq.Eq{"invoice.node_id": nodeIds}).
		LeftJoin("payment p on (invoice.r_hash = p.payment_hash)"), "subq").
		PlaceholderFormat(sq.Dollar).
		Where(filter).
		OrderBy(order...)

	if limit > 0 {
		qb = qb.Limit(limit).Offset(offset)
	}

	qs, args, err := qb.ToSql()
	if err != nil {
		return nil, 0, errors.Wrap(err, "Compiling SQL")
	}

	rows, err := db.Queryx(qs, args...)
	if err != nil {
		return nil, 0, errors.Wrap(err, "Running SQL Query")
	}
	defer rows.Close()

	for rows.Next() {
		var i Invoice
		err = rows.Scan(
			&i.AddIndex,
			&i.CreationDate,
			&i.SettleDate,
			&i.SettleIndex,
			&i.PaymentRequest,
			&i.DestinationPubKey,
			&i.RHash,
			&i.RPreimage,
			&i.Memo,
			&i.Value,
			&i.AmountPaid,
			&i.InvoiceState,
			&i.IsRebalance,
			&i.IsKeysend,
			&i.IsAmp,
			&i.PaymentAddr,
			&i.FallbackAddr,
			&i.UpdatedOn,
			&i.Expiry,
			&i.CltvExpiry,
			&i.Private,
		)

		if err != nil {
			return nil, 0, errors.Wrap(err, "SQL row scan")
		}

		r = append(r, &i)

	}

	totalQb := sq.Select("count(*) as total").
		PlaceholderFormat(sq.Dollar).
		FromSelect(
			sq.Select(`
				distinct add_index,
				creation_date,
				settle_date,
				settle_index,
				invoice.payment_request,
				invoice.destination_pub_key,
				r_hash,
				r_preimage,
				memo,
				(invoice.value_msat/1000) as value,
				(invoice.amt_paid_msat/1000) as amt_paid,
				invoice_state,
    			coalesce(invoice.r_hash = p.payment_hash, false) as is_rebalance,
				is_keysend,
				is_amp,
				payment_addr,
				fallback_addr,
				invoice.updated_on,
				expiry,
				cltv_expiry,
				private
			`).From("invoice").
				Where(sq.Eq{"invoice.node_id": nodeIds}).
				LeftJoin("payment p on (invoice.r_hash = p.payment_hash)"), "subquery").
		Where(filter)

	totalQs, args, err := totalQb.ToSql()
	if err != nil {
		return nil, 0, errors.Wrap(err, "Compile SQL")
	}

	err = db.QueryRowx(totalQs, args...).Scan(&total)
	if err != nil {
		return nil, 0, errors.Wrap(err, "SQL run query")
	}

	return r, total, nil

}

type Htlc struct {
	State             *uint64 `json:"state" db:"state"`
	LNDShortChannelId *uint64 `json:"lndShortChannelId" db:"lnd_short_channel_id"`
	Amt               *uint64 `json:"amt" db:"amt"`
	HtlcIndex         *uint64 `json:"htlcIndex" db:"htlc_index"`
	AcceptTime        *uint64 `json:"acceptTime" db:"accept_time"`
	ResolveTime       *uint64 `json:"resolveTime" db:"resolve_time"`
	AcceptHeight      *uint64 `json:"acceptHeight" db:"accept_height"`
	ExpiryHeight      *uint64 `json:"expiryHeight" db:"expiry_height"`
	MppTotalAmt       *uint64 `json:"mppTotalAmt" db:"mpp_total_amt"`
}

type Feature struct {
	Name       *string `json:"name" db:"name"`
	IsKnown    *bool   `json:"isKnown" db:"is_known"`
	IsRequired *bool   `json:"isRequired" db:"is_required"`
}

type FeatureMap map[string]Feature

type InvoiceDetails struct {
	Invoice
	DescriptionHash []byte       `json:"descriptionHash" db:"description_hash"`
	Htlcs           []Htlc       `json:"htlcs" db:"htlcs"`
	Features        FeatureMap   `json:"features" db:"features"`
	RouteHints      []RouteHints `json:"routeHints" db:"route_hints"`
}

type HopHint struct {
	LNDShortChannelId *uint64 `json:"lndShortChannelId" db:"lnd_short_channel_id"`
	NodeId            *string `json:"localNodeId" db:"node_id"`
	FeeBase           *uint64 `json:"feeBase" db:"fee_base"`
	CltvExpiryDelta   *uint64 `json:"cltvExpiryDelta" db:"cltv_expiry_delta"`
	FeeProportional   *uint64 `json:"feeProportionalMillionths" db:"fee_proportional_millionths"`
}

type RouteHints struct {
	HopHints []HopHint `json:"hopHints" db:"hop_hints"`
}

type ErrInvoiceNotFound struct {
	Identifier string
}

func (e ErrInvoiceNotFound) Error() string {
	return "Invoice not found"
}

func getInvoiceDetails(db *sqlx.DB, nodeIds []int, identifier string) (*InvoiceDetails, error) {

	//language=PostgreSQL
	qb := sq.Select(`
			distinct add_index,
			creation_date,
			settle_date,
			settle_index,
			invoice.payment_request,
			invoice.destination_pub_key,
			r_hash,
			r_preimage,
			memo,
			(invoice.value_msat/1000) as value,
			(invoice.amt_paid_msat/1000) as amt_paid,
			invoice_state,
			coalesce(invoice.r_hash = p.payment_hash, false) as is_rebalance,
			is_keysend,
			is_amp,
			payment_addr,
			fallback_addr,
			invoice.updated_on,
			expiry,
			cltv_expiry,
			private,
			description_hash,
			htlcs,
			features,
			route_hints
			`).
		PlaceholderFormat(sq.Dollar).
		From("invoice").
		Where(sq.Eq{"invoice.node_id": nodeIds}).
		LeftJoin("payment p on (invoice.r_hash = p.payment_hash)").
		Where(
			sq.Or{
				sq.Eq{"r_hash": identifier},
				sq.Eq{"r_preimage": identifier},
				sq.Eq{"payment_request": identifier},
			})

	qs, args, err := qb.ToSql()
	if err != nil {
		return nil, errors.Wrap(err, "Select builder to SQL")
	}
	i := InvoiceDetails{}
	var h []byte
	var fm []byte
	var rh []byte

	err = db.QueryRowx(qs, args...).Scan(
		&i.AddIndex,
		&i.CreationDate,
		&i.SettleDate,
		&i.SettleIndex,
		&i.PaymentRequest,
		&i.DestinationPubKey,
		&i.RHash,
		&i.RPreimage,
		&i.Memo,
		&i.Value,
		&i.AmountPaid,
		&i.InvoiceState,
		&i.IsKeysend,
		&i.IsAmp,
		&i.PaymentAddr,
		&i.FallbackAddr,
		&i.UpdatedOn,
		&i.CltvExpiry,
		&i.Expiry,
		&i.Private,
		&i.DescriptionHash,
		&h,
		&fm,
		&rh,
	)
	switch err {
	case nil:
		break
	case sql.ErrNoRows:
		return nil, ErrInvoiceNotFound{identifier}
	default:
		return nil, errors.Wrap(err, "SQL run query")
	}

	// Unmarshal the HTLCs
	err = json.Unmarshal(h, &i.Htlcs)
	if err != nil {
		return nil, errors.Wrap(err, "JSON unmarshal of HTLCs")
	}

	// Unmarshal the feature map
	err = json.Unmarshal(fm, &i.Features)
	if err != nil {
		return nil, errors.Wrap(err, "JSON unmarshal of features")
	}

	// Unmarshal the route hints
	err = json.Unmarshal(rh, &i.RouteHints)
	if err != nil {
		return nil, errors.Wrap(err, "JSON unmarshal of route hints")
	}

	return &i, nil
}
